# The build pipeline is responsible for validating and preparing your Terraform code.
#
name: 'Terraform Build'

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform:
    name: 'Terraform Build'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
      #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # - name: Navigate to Terraform directory
    #   run: cd azure_tf

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ARM_CLIENT_ID
        tenant-id: ARM_TENANT_ID
        subscription-id: ARM_SUBSCRIPTION_ID

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=azure_tf init

    # - name: Terraform Linting
    #   run: tflint

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -recursive -check -diff

    # Validate the Terraform configuration to ensure it is syntactically correct and internally consistent using terraform validate.
    - name: Validate Terraform configuration
      run: terraform -chdir=azure_tf validate

    # Scan for security vulnerabilities in your Terraform code.
    # - name: Run tfsec
    #   run: tfsec .

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=azure_tf plan -input=false

    - name: Terraform Apply
      run: terraform -chdir=azure_tf apply -auto-approve -input=false

    # - name: Save plan for later jobs
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: terraform-plan
    #     path: plan.tfplan

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -input=false

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
